install.packages("biotools")
install.packages("biotools")
install.packages("rpanel")
install.packages("biotools")
library(ggplot2)
library(knitr)
options(width = 80)
opts_chunk$set(echo = TRUE, tidy = TRUE, tidy.opts = list(width.cutoff=80), fig.width = 5, fig.height = 5, fig.align = "center", warning = F, message = F, fig.pos = 'h')
cork <- read.csv("cork.csv")
head(cork)
colMeans(cork[,-1])
library(ggplot2)
qplot(data = stack(cork[,-1]), x = ind, y = values, geom = "boxplot")
cor(cork[,-1])
library(GGally)
ggpairs(cork[,-1])
cork_diff <- cbind(cork$X1_North - cork$X4_West, cork$X2_East - cork$X4_West, cork$X3_South - cork$X4_West)
head(cork_diff)
library(DescTools)
HotellingsT2Test(cork_diff)
nrow(cork_diff)
T2 <- (28 - 1)*3/25 * 6.4019
T2
bon_level <- 1 - 0.05/6
t.test(cork$X1_North, cork$X2_East, conf.level = bon_level)
t.test(cork$X1_North, cork$X3_South, conf.level = bon_level)
t.test(cork$X1_North, cork$X4_West, conf.level = bon_level)
t.test(cork$X2_East, cork$X3_South, conf.level = bon_level)
t.test(cork$X2_East, cork$X4_West, conf.level = bon_level)
t.test(cork$X3_South, cork$X4_West, conf.level = bon_level)
library(energy)
mvnorm.etest(cork_diff, R = 1000)
rabbit <- read.csv("rabbits2.csv")
head(rabbit)
library(dplyr)
means <- rabbit[,-1] %>% group_by(insulin) %>% summarise_all(mean)
means <- as.matrix(means)
plot(x = 1:5, y = 1:5, ylim = range(means[,-1]), 'n', xlab = "time", ylab = "percent changes from the baseline concentration")
lines(x = 1:5, y = means[1,-1], col = 1)
lines(x = 1:5, y = means[2,-1], col = 2)
HotellingsT2Test(rabbit[rabbit$insulin == 1,-c(1,2)], rabbit[rabbit$insulin == 2, -c(1,2)])
nrow(rabbit)
df1 <- 5
df2 <- 48
df3 <- 54 - 2
T2 <- df3 * df1/df2 * 0.39966
T2
n1 <- nrow(rabbit[rabbit$insulin == 1,])
n2 <- nrow(rabbit[rabbit$insulin == 2,])
p <- 5
xbar1 <- means[1,-1]
xbar2 <- means[2,-1]
xvar1 <- var(rabbit[rabbit$insulin == 1, -c(1,2)])
xvar2 <- var(rabbit[rabbit$insulin == 2, -c(1,2)])
df3 <- n1 + n2 - 2
levelb <- 1 - 0.05/(2*p)
c_bon <- qt(levelb, df3)
# Compute pooled covariance matrix
vpool <- ((n1 - 1) * xvar1 + (n2 - 1) * xvar2)/(n1 + n2 - 2)
# Compute T-squared limits
lower_limit <- (xbar1 - xbar2) - c_bon * sqrt(diag(vpool) * ((1/n1) + (1/n2)))
upper_limit <- (xbar1 - xbar2) + c_bon * sqrt(diag(vpool) * ((1/n1) + (1/n2)))
rbind(lower_limit, upper_limit)
library(biotools)
boxM(rabbit[,-c(1,2)], rabbit$insulin)
library(energy)
mvnorm.etest(rabbit[rabbit$insulin == 1, -c(1,2)], R = 1000)
mvnorm.etest(rabbit[rabbit$insulin == 2, -c(1,2)], R = 1000)
crudeoil <- read.csv("crudeoil.csv")
head(crudeoil)
crudeoil$Zone <- factor(crudeoil$Zone)
fit.lm <- lm(cbind(X1, X2, X3, X4, X5) ~ Zone, data = crudeoil)
library(car)
Manova_res <- Manova(fit.lm)
summary(Manova_res)
Lambda <- det(Manova_res$SSPE)/(det(Manova_res$SSP$Zone + Manova_res$SSPE))
Lambda
# Compute sample sizes and number of variables
n1 <- dim(crudeoil[crudeoil$Zone == 1, -1])[1]
n2 <- dim(crudeoil[crudeoil$Zone == 2, -1])[1]
n3 <- dim(crudeoil[crudeoil$Zone == 3, -1])[1]
p <- dim(crudeoil[, -1])[2]
g <- 3
# Enter the confidence level
level <- 0.95
# Compute Bonferroni Confidence Intervals for each student population
m <- p * g * (g - 1)/2
levelb <- 1 - ((1 - level)/(2 * m))
df <- nrow(crudeoil) - g
c_bon <- qt(levelb, df)
c_bon
df
levelb
library(fdapace)
?MakeGPFunctionalData
?MakeSparseGP
MakeGPFunctionalData()
MakeGPFunctionalData
library(fdapace)
data <- MakeGPFunctionalData(n = 50, M = 100, K = 3, sigma = 0.01, lambda = exp(-1/2 * c(0:2)))
matplot(t(data$Yn), type = 'l', ylab = "Y(t)", xlab = "t", main = "K = 3, sigma = 0.01")
fpca_input <- MakeFPCAInputs(tVec = data$pts, yVec = data$Yn)
# compare methods for selecting K
pca_res1 <- FPCA(Ly = fpca_input$Ly, Lt = fpca_input$Lt, optns = list(methodSelectK = "FVE", methodXi = "IN"))
pca_res2 <- FPCA(Ly = fpca_input$Ly, Lt = fpca_input$Lt, optns = list(methodSelectK = "AIC", methodXi = "IN"))
pca_res3 <- FPCA(Ly = fpca_input$Ly, Lt = fpca_input$Lt, optns = list(methodSelectK = "BIC", methodXi = "IN"))
# FVE
pca_res1$selectK
# AIC
pca_res2$selectK
# BIC
pca_res3$selectK
# compare pc scores of integration method and blup
pca_res_in <- FPCA(Ly = fpca_input$Ly, Lt = fpca_input$Lt, optns = list(methodXi = "IN"))
pca_res_blup <- FPCA(Ly = fpca_input$Ly, Lt = fpca_input$Lt, optns = list(methodSelectK = "FVE", methodXi = "CE"))
FPCA
.Machine$double.eps
?ConvertSupport
?install.packages
install.packages("fdapace", type = "binary")
install.packages("fdapace", type = "binary")
?fdapace
library(fdapace)
?fdapace
devtools::install_version("fdapace", version = "0.4.0")
devtools::install_version("fdapace", repos = "http://cran.us.r-project.org")
devtools::install_version("fdapace", repos = "http://cran.us.r-project.org", version = "0.4.0")
library(fdapace)
?`fdapace-package`
?fdapace
p <- seq(0.05, 0.95, 0.05)
p
plot(qt(p), qnorm(p))
plot(qt(p, df = 2), qnorm(p))
plot(qt(p, df = 1), qnorm(p))
p <- seq(0.05, 0.95, 0.01)
p
plot(qt(p, df = 1), qnorm(p))
hist(qt(p, df = 1))
hist(qt(p, df = 1), breaks = 100)
hist(qt(p, df = 1), breaks = 50)
hist(qt(p, df = 1), breaks = 20)
hist(qt(p, df = 2), breaks = 20)
hist(qt(p, df = 2), breaks = 30)
plot(qt(p, df = 2), qnorm(p))
plot(qt(p, df = 3), qnorm(p))
plot(qt(p, df = 1), qnorm(p))
p <- seq(0.05, 0.95, 0.005)
p
hist(qt(p, df = 1), breaks = 30)
plot(qt(p, df = 1), qnorm(p))
hist(qt(p, df = 1), breaks = 30)
lines(qt(p, df = 1), col = "blue")
length(p)
lines(qt(p, df = 1), 181*dt(qt(p, df = 1)))
lines(qt(p, df = 1), 181*dt(qt(p, df = 1), df  =1))
hist(qt(p, df = 1), breaks = 30)
lines(qt(p, df = 1), 90.5*dt(qt(p, df = 1), df  =1))
lines(qt(p, df = 1), 90.5*dt(qt(p, df = 1), df  =1), col = "blue")
lines(qt(p, df = 1), 90.5*dt(qt(p, df = 1), df  =1), col = "blue", lwd = 2)
par(mfrow = c(1,2))
hist(qt(p, df = 1), breaks = 30, main = "Histogram of t-distribution with 1 df", xlab = "")
lines(qt(p, df = 1), 90.5*dt(qt(p, df = 1), df  =1), col = "blue", lwd = 2)
plot(qt(p, df = 1), qnorm(p), main = "Normal Q-Q plot of t-distribution with df 1", xlab = "t quantile", ylab = "standard normal quantile")
Compound1 <- c(3.03, 5.53, 5.60, 9.30, 9.92, 12.51, 12.95, 15.21, 16.04, 16.84)
Compound2 <- c(3.19, 4.26, 4.47, 4.53, 4.67, 4.69, 5.78, 6.79, 9.37, 12.75)
library(tidyverse)
library(reshape2)
?melt
compounds <- data.frame(compound1 = Compound1, compound2 = Compound2) %>% melt(measure.vars = c("compound1", "compound2"))
head(compounds)
compounds <- data.frame(compound1 = Compound1, compound2 = Compound2) %>% melt(measure.vars = c("compound1", "compound2"), variable.name = c("compound", "time to failure"))
compounds <- data.frame(compound1 = Compound1, compound2 = Compound2) %>% melt(measure.vars = c("compound1", "compound2"), variable.name = "compound", value.name = "time to failure")
quantile(Compound1)
head(compounds)
ggplot(compounds, aes(x = compound, y = `time to failure`, fill = compounds)) + geom_boxplot()
ggplot(compounds, aes(x = compound, y = `time to failure`, fill = factor(compounds))) + geom_boxplot()
ggplot(compounds, aes(x = factor(compound), y = `time to failure`, fill = factor(compounds))) + geom_boxplot()
str(compounds)
ggplot(compounds, aes(x = factor(compound), y = "time to failure", fill = factor(compounds))) + geom_boxplot()
ggplot(compounds, aes(x = factor(compound), y = ``time to failure``, fill = factor(compounds))) + geom_boxplot()
ggplot(compounds, aes(x = factor(compound), y = `time to failure`, fill = factor(compounds))) + geom_boxplot()
compounds$`time to failure`
ggplot(compounds, aes(x = factor(compound), y = `time to failure`, fill = factor(compound))) + geom_boxplot()
?stem
library(aplpack)
stem.leaf.backback(x = Compound1, y = Compound2)
stem.leaf.backback(x = Compound1, y = Compound2, unit = 0.1)
?stem.leaf.backback
stem.leaf.backback(x = Compound1, y = Compound2, unit = 0.1, depths = F)
stem.leaf.backback(x = Compound1, y = Compound2, unit = 0.1, depths = F, show.no.depths = T)
fbdata <- c(221.44,
221.32,
218,76,
217.94,
214.87,
217.79,
223.23,
209.53,
201.91)
sort(fbdata)
?sort
fbdata
fbdata <- c(221.44,
221.32,
218.76,
217.94,
214.87,
217.79,
223.23,
209.53,
201.91)
sort(fbdata)
9*(0.82) + 0.5
0.88*221.44 + (1 - 0.88)*221.32
9*0.25 + 0.5
0.75*214.87 + 0.25*209.53
9*0.75 + 0.5
7.5/9
6.5/9
0.25*221.44 + 0.75*221.32
0.5/9
p <- .5/9
4.9*(p^0.14 - (1 - p)^0.14)
p <- 8.5/9
p
4.9*(p^0.14 - (1 - p)^0.14)
221.35 - 213.535
213.535 - 1.5 * 7.815
221.35 + 1.5 * 7.815
mean(fbdata)
sd(fbdata)
setwd("~/Dropbox/STAT305S19/hw/hw4")
polyol <- read.table("polyol.dat", header = T, sep = ",")
head(polyol)
lm.fit <- lm(formula = Average.Molecular.Weight ~ Pot.Temperature, data = polyol)
summary(lm.fit)
summary(lm.fit)$r.squared
?knit
library(knitr)
?knit
knit("h4_solution.Rnw")
knit("h4_solution.Rnw")
Sweave2knitr("h4_solution.Rnw")
knit("h4_solution.Rnw")
Sweave2knitr("h4_solution.Rnw")
knit("h4_solution-knitr.Rnw")
lm.fit
<<>>
library(tidyverse)
@
ggplot(data = polyol, aes(x = Pot.Temperature, y = Average.Molecular.Weight)) + geom_point() + geom_abline(intercept = lm.fit$coefficients[1], slope = lm.fit$coefficients[2], color = "blue")
ggplot(data = polyol, aes(x = Pot.Temperature, y = Average.Molecular.Weight)) + geom_point() + geom_abline(intercept = lm.fit$coefficients[1], slope = lm.fit$coefficients[2], color = "blue") + theme_bw()
lm.fit$residuals
polyol$Residuals <- lm.fit$residuals
ggplot(data = polyol, aes(x = Pot.Temperature), y = Residuals) + geom_point() + geom_abline(intercept = 0, slope = 0)
polyol$Residuals
polyol$Residuals <- lm.fit$residuals
ggplot(data = polyol, aes(x = Pot.Temperature, y = Residuals)) + geom_point() + geom_abline(intercept = 0, slope = 0)
polyol$`Fitted Values` <- lm.fit$fitted.values
polyol$`Fitted Values` <- lm.fit$fitted.values
ggplot(data = polyol, aes(x = `Fitted Values`, y = Residuals)) + geom_point() + geom_abline(intercept = 0, slope = 0) + theme_bw()
ggplot(data = polyol, aes(x = Residuals)) + geom_qq_line()
ggplot(data = polyol, aes(sample = Residuals)) + geom_qq_line()
ggplot(data = polyol, aes(sample = Residuals)) + geom_qq_line() + geom_qq()
polyol$Pot.Temperatur
?geom_qq
ggplot(data = polyol, aes(sample = Residuals, x = Residuals)) + geom_qq_line() + geom_qq()
ggplot(data = polyol, aes(sample = Residuals)) + geom_qq_line() + geom_qq()
ggplot(data = polyol, aes(y = Residuals)) + geom_qq_line() + geom_qq()
ggplot(data = polyol, aes(sample = Residuals)) + geom_qq_line() + geom_qq()
ggplot(data = polyol, aes(sample = Residuals)) + stat_qq() + stat_qq_line()
ggplot(data = polyol, aes(sample = Residuals)) + stat_qq() + stat_qq_line() + coord_flip()
lm.fit <- lm(formula = Average.Molecular.Weight ~ Pot.Temperature + I(Pot.Temperature^2), data = polyol)
polyol$Pot.Temperature.Squared <- polyol$Pot.Temperature^2
lm.fit <- lm(formula = Average.Molecular.Weight ~ Pot.Temperature + I(Pot.Temperature^2), data = polyol)
lm.fit
lm.fit <- lm(formula = Average.Molecular.Weight ~ Pot.Temperature + Pot.Temperature.Squared, data = polyol)
lm.fit
curve_x <- seq(160, 260, 1)
curve_y <- predict(lm.fit, newdata = curve_x)
lm.fit <- lm(formula = Average.Molecular.Weight ~ Pot.Temperature + I(Pot.Temperature^2), data = polyol)
curve_x <- seq(160, 260, 1)
curve_y <- predict(lm.fit, newdata = data.frame(Pot.Temperature = curve_x))
ggplot(data = polyol, aes(x = Pot.Temperature, y = Average.Molecular.Weight)) + geom_point() + geom_smooth(data = data.frame(x = curve_x, y = curve_y), aes(x = x,  y = y), inherit.aes = F, color = "blue") + theme_bw()
ggplot(data = polyol, aes(x = Pot.Temperature, y = Average.Molecular.Weight)) + geom_point() + geom_line(data = data.frame(x = curve_x, y = curve_y), aes(x = x,  y = y), inherit.aes = F, color = "blue") + theme_bw()
polyol$Residuals <- lm.fit$residuals
ggplot(data = polyol, aes(x = Pot.Temperature, y = Residuals)) + geom_point() + geom_abline(intercept = 0, slope = 0) + theme_bw()
polyol$`Fitted Values` <- lm.fit$fitted.values
ggplot(data = polyol, aes(x = `Fitted Values`, y = Residuals)) + geom_point() + geom_abline(intercept = 0, slope = 0) + theme_bw()
ggplot(data = polyol, aes(sample = Residuals)) + stat_qq() + coord_flip() + xlab("Residual Quantiles")+ylab("Standard Normal Quantiles") + theme_bw()
@
tool_life <- read.table("tool_life.dat", header = T, sep = ",")
names(tool_life)
lm.fit$coefficients
lm.fit <- lm(ln.Tool.Life ~ ln.Cutting.Speed, data = tool_life)
ggplot(data = tool_life, aes(x = ln.Cutting.Speed, y = ln.Tool.Life)) + geom_point() + geom_abline(intercept = lm.fit$coefficients[1], slope = lm.fit$coefficients[2], color = blue) + xlab("ln(Cutting.Speed)") + ylab("ln(Tool.Life)")
lm.fit <- lm(ln.Tool.Life ~ ln.Cutting.Speed, data = tool_life)
ggplot(data = tool_life, aes(x = ln.Cutting.Speed, y = ln.Tool.Life)) + geom_point() + geom_abline(intercept = lm.fit$coefficients[1], slope = lm.fit$coefficients[2], color = "blue") + xlab("ln(Cutting.Speed)") + ylab("ln(Tool.Life)")
names(tool_life)
lm.fit <- lm(ln.Tool.Life. ~ ln.Cutting.Speed., data = tool_life)
ggplot(data = tool_life, aes(x = ln.Cutting.Speed., y = ln.Tool.Life.)) + geom_point() + geom_abline(intercept = lm.fit$coefficients[1], slope = lm.fit$coefficients[2], color = "blue") + xlab("ln(Cutting.Speed)") + ylab("ln(Tool.Life)")
names(pulp)
pulp <- read.table("pulp.dat", header = T, sep = ",")
names(pulp)
lm.fit <- lm(Specific.Surface.Area ~ X.NaOH + Time, data = pulp)
summary(lm.fit)
lm.fit$coefficients
print(lm.fit$coefficients, digits = 6)
pulp$Residuals <- lm.fit$residuals
?layout
layout(matrix(c(1,2,3,4), ncol = 2))
pulp$Residuals <- lm.fit$residuals
ggplot(data = pulp, aes(x = X.NaOH, y = Residuals)) + geom_point() + geom_abline(intercept = 0, slope = 0) + xlab("%NaOH") + theme_bw()
ggplot(data = pulp, aes(x = Time, y = Residuals)) + geom_point() + geom_abline(intercept = 0, slope = 0) + xlab("Time (min)")+ theme_bw()
pulp$`Fitted Values` <- lm.fit$fitted.values
ggplot(data = pulp, aes(x = `Fitted Values`, y = Residuals)) + geom_point() + geom_abline(intercept = 0, slope = 1)+ theme_bw()
ggplot(data = pulp, aes(sample= Residuals)) + stat_qq() + coord_flip() + xlab("Residual Quantiles") + ylab("Standard Normal Quantiles")+ theme_bw()
install.packages("ggpubr")
rep("", 4)
ggplot(data = pulp, aes(x = X.NaOH, y = Specific.Surface.Area)) + geom_point() + geom_line(aes(x = X.NaOH, y = `Fitted Values`, color = Time), inherit.aes = F)
ggplot(data = pulp, aes(x = X.NaOH, y = Specific.Surface.Area)) + geom_point() + geom_line(aes(x = X.NaOH, y = `Fitted Values`, color = factor(Time)), inherit.aes = F)
?legend
lm.fit <- lm(Specific.Surface.Area ~ X.NaOH + Time + X.NaOH:Time)
lm.fit <- lm(Specific.Surface.Area ~ X.NaOH + Time + X.NaOH:Time, data = pulp)
summary(lm.fit)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
barplot(height = y, names.arg = 1:6, col = "blue", space = 0)
abline(v = 3.5909, lwd = 5)
par(cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
barplot(height = y, names.arg = 1:6, col = "blue", space = 0)
abline(v = 3.5909, lwd = 5)
par(cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
barplot(height = y, names.arg = 1:6, col = "blue", space = 0)
abline(v = 3.5909, lwd = 5)
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
barplot(height = y, names.arg = 1:6, col = "blue", space = 0)
abline(v = 3.5909, lwd = 5)
text(3.5909, -0.5, expression(mu))
locator()
a <- locator()
par("usr")
locator()
?barplot
?hist
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
barplot(height = y, names.arg = 1:6, col = "blue", space = 0)
abline(v = 3.5909, lwd = 5)
text(3.5909, -0.01, mu)
text(3.5909, -0.01, "mu")
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
barplot(height = y, names.arg = 1:6, col = "blue", space = 0)
abline(v = 3.5909, lwd = 5)
text(3.5909, -0.01, "mu")
locator()
text(3.57, 2.55, "mu")
?text
?barplot
text(3.57, 2.55, labels = "mu")
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
barplot(height = y, col = "blue", space = 0)
abline(v = 3.5909, lwd = 5)
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0)
abline(v = 3.5909, lwd = 5)
mp
text(c(mp - 0.5, 6), rep(-0.01, 6), labels = 0:6)
text(c(mp - 0.5, 6), rep(-0.01, 6), labels = 0:6, col = "black")
text(c(mp - 0.5, 6), rep(-0.01, 6), labels = 0:6, col = "black", cex = 1)
par("sur")
par("usr")
text(c(mp - 0.5, 6), rep(0.1, 6), labels = 0:6, col = "black", cex = 1)
text(c(mp - 0.5, 6), rep(0, 6), labels = 0:6, col = "black", cex = 1)
?barplot
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0, ylim = c(-0.1, 0.3))
abline(v = 3.5909, lwd = 5)
text(c(mp - 0.5, 6), rep(-0.05, 6), labels = 0:6, col = "black", cex = 1)
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0, ylim = c(-0.1, 0.25))
abline(v = 3.5909, lwd = 5)
text(c(mp - 0.5, 6), rep(-0.02, 6), labels = 0:6, col = "black", cex = 0.5)
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0, ylim = c(-0.02, 0.25))
abline(v = 3.5909, lwd = 5)
text(c(mp - 0.5, 6), rep(-0.02, 6), labels = 0:6, col = "black", cex = 0.5)
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0, ylim = c(-0.05, 0.25))
abline(v = 3.5909, lwd = 5)
text(c(mp - 0.5, 6), rep(-0.02, 6), labels = 0:6, col = "black", cex = 0.5)
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, names.arg = 1:6, col = "blue", space = 0, ylim = c(0, 0.3))
abline(v = 3.5909, lwd = 5)
text(3.6, 0.25, expression(mu))
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, names.arg = 1:6, col = "blue", space = 0, ylim = c(0, 0.3))
abline(v = 3.5909, lwd = 5)
text(3.7, 0.25, expression(mu))
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, names.arg = 1:6, col = "blue", space = 0, ylim = c(0, 0.3))
abline(v = 3.5909, lwd = 5)
text(3.8, 0.25, expression(mu))
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, names.arg = 1:6, col = "blue", space = 0, ylim = c(0, 0.25))
abline(v = 3.5909, lwd = 5)
text(3.8, 0.25, expression(mu))
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, names.arg = 1:6, col = "blue", space = 0, ylim = c(0, 0.25))
abline(v = 3.5909, lwd = 5)
text(3.8, 0.2, expression(mu))
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, names.arg = 1:6, col = "blue", space = 0, ylim = c(0, 0.25))
abline(v = 3.5909, lwd = 5, col = "red")
text(3.8, 0.2, expression(mu), col = "red")
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, names.arg = 1:6, col = "blue", space = 0, ylim = c(0, 0.25))
abline(v = 3.5909 - 0.5, lwd = 5, col = "red")
text(3.8, 0.2, expression(mu), col = "red")
?barplot
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0, ylim = c(0, 0.25))
abline(v = 3.5909 - 0.5, lwd = 5, col = "red")
axis(side = 1, at = mp, labels = 1:6)
text(3.8, 0.2, expression(mu), col = "red")
text(3.8, -0.01, expression(mu), col = "red")
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0, ylim = c(0, 0.25))
abline(v = 3.5909 - 0.5, lwd = 5, col = "red")
axis(side = 1, at = c(mp, 3.5909), labels = c(1:6, "mu"))
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0, ylim = c(0, 0.25))
abline(v = 3.5909 - 0.5, lwd = 5, col = "red")
axis(side = 1, at = mp, labels = 1:6)
text(3.6, -0.01, expression(mu), col = "red")
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0, ylim = c(0, 0.25))
abline(v = 3.5909 - 0.5, lwd = 5, col = "red")
axis(side = 1, at = mp, labels = 1:6)
text(3.6, 0.2, expression(mu), col = "red")
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0, ylim = c(0, 0.25))
abline(v = 3.5909 - 0.5, lwd = 5, col = "red")
axis(side = 1, at = mp, labels = 1:6)
text(3.5, 0.2, expression(mu), col = "red")
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0)
abline(v = 3.5909 - 0.5, lwd = 5, col = "red")
axis(side = 1, at = mp, labels = 1:6)
box()
text(3.3, 0.2, expression(mu), col = "red", cex = 2)
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0)
abline(v = 3.5909 - 0.5, lwd = 5, col = "red")
axis(side = 1, at = mp, labels = 1:6)
box()
text(3.4, 0.2, expression(mu), col = "red", cex = 2)
par(mfrow = c(1,1), cex = 1.5)
y = c(5/22, 7/44, 1/22, 7/44, 2/11, 5/22)
mp <- barplot(height = y, col = "blue", space = 0, ylim = c(0, 0.25))
abline(v = 3.5909 - 0.5, lwd = 5, col = "red")
axis(side = 1, at = mp, labels = 1:6)
box()
text(3.4, 0.2, expression(mu), col = "red", cex = 2)
par(cex = 1.5)
f = function(s){(1/(2^s))* (6/(3.14^2))}
s = f(1:10)
mp <- barplot(height = s,  col = "blue", space = 0)
axis(side = 1, at = mp, labels = 1:10)
par(cex = 1.5)
f = function(s){(1/(2^s))* (6/(3.14^2))}
s = f(1:10)
mp <- barplot(height = s,  col = "blue", space = 0, ylim = c(0, 0.32))
axis(side = 1, at = mp, labels = 1:10)
box()
